bits 16
org 0x7C00

	cli
	
	

 mov ah , 0x02
 mov al ,6
 mov dl , 0x80
 mov ch ,0
 mov dh , 0
 mov cl , 2
 mov bx , StartingTheCode
 int 0x13
 jmp StartingTheCode
 
  
times (510 - ($ - $$)) db 0
db 0x55, 0xAA
StartingTheCode:
mov al, 13h
mov ah, 0
int 10h ; set graphics video mode.

next:

; enable (0xf4)
mov al,0xf4
call MouseWrite

waitformouse:

in al,0x64
and al,0x20
jz waitformouse

maincode:
cmp byte[stat],1
je nextn
mov al,0000b
mov cx,[xmouse]
mov dx,[ymouse]
mov ah,0ch
int 10h

nextn:
in al,0x60 ;status byte
and al,3
mov byte[stat],al

in al,0x60 ;xbyte
xor dx,dx
movsx dx,al
add [xmouse], dx

;x_borders 
cmp word[xmouse],0  
jg case0
mov word[xmouse],0
	  
case0:
cmp word[xmouse],319
jl case1
mov word[xmouse],319
case1:

in al,0x60 ;ybyte
xor dx,dx
movsx dx,al
sub [ymouse], dx

;y_borders
cmp word [ymouse],199
jl case2
mov word[ymouse],199
       
case2:
cmp word [ymouse],0
jg case3
mov word [ymouse],0
case3:

in al,0x60 ;zaxis byte (not used)

cmp byte[stat],1
je yellow
mov al,0100b
jmp nextm
yellow:
mov al,0100b
call new
nextm:
mov cx,[xmouse]
mov dx,[ymouse]
mov ah,0ch
int 10h

jmp waitformouse

xor ecx,ecx

WriteMouseWait:
check1:  
in         al, 0x64
and        al, 0x02
jz         fin1 
jmp check1
fin1:
ret
	
MouseWrite:
mov ah, al
call WriteMouseWait
mov al, 0xd4
out 0x64, al
call WriteMouseWait
mov al, ah
out 0x60, al
in al,0x60
ret

xmouse: dw 0      
ymouse: dw 0
stat: db 0
stat2: db 0
a: dd 0
b: dd 0
x1: dd 0
y1: dd 0
x2: dd 0
y2: dd 0
x3:dd 0
y3:dd 0
tempx1:dd 0
tempx2:dd 0
tempy1:dd 0
tempy2:dd 0
xmin: dd 0
xmax: dd 0


new:
cmp byte[stat2],0
je zero

cmp byte[stat2],1
je two
xor ecx,ecx
xor edx,edx
mov cx,[xmouse]
mov dx,[ymouse]

mov [x3],ecx

mov [y3],edx
inc byte[stat2]
jmp nexty

two:
xor ecx,ecx
xor edx,edx
mov cx,[xmouse]
mov dx,[ymouse]

mov [x2],ecx

mov [y2],edx
inc byte[stat2]
jmp nexty
zero:
xor edx,edx
xor ecx,ecx
mov cx,[xmouse]
mov dx,[ymouse]

mov [x1],ecx

mov [y1],edx
inc byte[stat2]

nexty:
cmp byte[stat2],3
jne print
pusha
call triangle
popa
mov byte[stat2],0

print:
ret

triangle:
mov esi,[x1]
mov edi,[x2]
mov [tempx1],esi
mov [tempx2],edi

mov esi,[y1]
mov edi,[y2]
mov [tempy1],esi
mov [tempy2],edi

pusha
call paint
popa

mov esi,[x2]
mov edi,[x3]
mov [tempx1],esi
mov [tempx2],edi

mov esi,[y2]
mov edi,[y3]
mov [tempy1],esi
mov [tempy2],edi

pusha
call paint
popa

mov esi,[x3]
mov edi,[x1]
mov [tempx1],esi
mov [tempx2],edi

mov esi,[y3]
mov edi,[y1]
mov [tempy1],esi
mov [tempy2],edi

pusha
call paint
popa
ret


paint:
mov ebx,[tempx1]
mov edx,[tempx2]
cmp ebx,edx
ja max
mov [xmax],edx
mov [xmin],ebx
jmp here
max:
mov [xmax],ebx
mov [xmin],edx
here:
mov ebx,[xmin]

nextfun:
mov edx,[xmax]
mov esi,[xmax]
mov edi,[xmin]
sub esi,edi
cmp esi,10
ja A


mov esi,[tempy1]
mov edi,[tempy2]
cmp esi,edi
ja _swap
mov ebp,[xmax]
add ebp,[xmin]
shr ebp,1
_ycompare:
cmp esi,edi
ja next5
mov al,15h
mov ah,0ch
mov cx,bp
mov dx,si
int 10h
inc esi
jmp _ycompare
_swap:
mov [tempy2],esi
mov [tempy1],edi
mov esi,[tempy1]
mov edi,[tempy2]
mov ebp,[tempx1]
add ebp,[tempx2]
shr ebp,1
jmp _ycompare

A:
cmp ebx,edx
jg next5

xor eax,eax
xor ecx,ecx
mov ax,bx



call fun



mov dx,ax
mov al, 0001b
mov cx, bx
;mov dx, ax
mov ah, 0ch
int 10h ; set pixel.

inc bx
jmp nextfun

next5:
ret

fun:
fild dword [tempy2]
fisub dword [tempy1]
fild dword [tempx2]
fisub dword [tempx1]
fdivp
fistp dword [b]
fild dword [tempy1]
fild dword [b]
fimul dword [tempx1]
fsubp
fistp dword [a]
 
mul word[b]
add ax,[a]
ret
times (0x400000 - 512) db 0

db 	0x63, 0x6F, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x78, 0x00, 0x00, 0x00, 0x02
db	0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
db	0x20, 0x72, 0x5D, 0x33, 0x76, 0x62, 0x6F, 0x78, 0x00, 0x05, 0x00, 0x00
db	0x57, 0x69, 0x32, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x78, 0x04, 0x11
db	0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xE6, 0xB9, 0x49, 0x44, 0x4E, 0x1C
db	0x50, 0xC9, 0xBD, 0x45, 0x83, 0xC5, 0xCE, 0xC1, 0xB7, 0x2A, 0xE0, 0xF2
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00