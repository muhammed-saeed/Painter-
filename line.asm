bits 16
org 0x7C00

	cli
;mov bx,ScanCodeTable
	bits 16
org 0x7C00

	cli
	
	

	 mov ah , 0x02
 mov al ,6
 mov dl , 0x80
 mov ch ,0
 mov dh , 0
 mov cl , 2
 mov bx , StartingTheCode
 int 0x13
 jmp StartingTheCode
 
  
  

	
	
times (510 - ($ - $$)) db 0
db 0x55, 0xAA
	StartingTheCode:
	;WRITE YOUR CODE HERE
mov al, 13h
mov ah, 0
int 10h ; set graphics video mode.
jmp next

WriteMouseWait:
check1:  
in         al, 0x64
and        al, 0x02
jz         fin1 
jmp check1
fin1:
ret
	
MouseWrite:
mov ah, al
call WriteMouseWait
mov al, 0xd4
out 0x64, al
call WriteMouseWait
mov al, ah
out 0x60, al
in al,0x60
ret

ddx: dd 0
ddy: dd 0
x: dd 0
y: dd 0
addx: dd 0
addy: dd 0
x0: dd 0
y0: dd 0
x1: dd 44
y1: dd 100
step: dd 0
xinc: dd 0
yinc: dd 0
xmouse: dw 0      
ymouse: dw 0
stat: db 0
stat2: db 0
color: db 0

next:

; enable (0xf4)
mov al,0xf4
call MouseWrite

waitformouse:

in al,0x64
and al,0x20
jz waitformouse

maincode:
cmp byte[stat],2
je erase
mov al,[color]
mov cx,[xmouse]
mov dx,[ymouse]
mov ah,0ch
int 10h
jmp nextn

erase:
mov al,0
mov cx,[xmouse]
mov dx,[ymouse]
mov ah,0ch
int 10h


nextn:
in al,0x60 ;status byte
and al,3
mov byte[stat],al

in al,0x60 ;xbyte
xor dx,dx
movsx dx,al
add [xmouse], dx

;x_borders 
cmp word[xmouse],0  
jg case0
mov word[xmouse],0
	  
case0:
cmp word[xmouse],319
jl case1
mov word[xmouse],319
case1:

in al,0x60 ;ybyte
xor dx,dx
movsx dx,al
sub [ymouse], dx

;y_borders
cmp word [ymouse],199
jl case2
mov word[ymouse],199
       
case2:
cmp word [ymouse],0
jg case3
mov word [ymouse],0
case3:

in al,0x60 ;zaxis byte (not used)
mov cx,[xmouse]
mov dx,[ymouse]
mov ah,0dh
int 10h
mov [color],al

cmp byte[stat],1
je yellow
mov al,0100b
jmp nextm
yellow:
mov al,0100b
call new
nextm:
mov cx,[xmouse]
mov dx,[ymouse]
mov ah,0ch
int 10h

jmp waitformouse

new:
cmp byte[stat2],0
je zero
xor ecx,ecx
xor edx,edx
mov cx,[xmouse]
mov dx,[ymouse]
mov [x1],ecx
mov [y1],edx
inc byte[stat2]
jmp nexty
zero:
xor edx,edx
xor ecx,ecx
mov cx,[xmouse]
mov dx,[ymouse]
mov [x0],ecx
mov [y0],edx
inc byte[stat2]

nexty:
cmp byte[stat2],2
jne print
pusha
call paint
popa
mov byte[stat2],0

print:
ret

paint:

mov eax,[x1]
sub eax,[x0]
mov[ddx],eax

cmp eax,0
jge notnegx
neg eax
notnegx:
mov [addx],eax

mov eax,[y1]
sub eax,[y0]
mov[ddy],eax


cmp eax,0
jge notnegy
neg eax
notnegy:
mov [addy],eax

cmp eax,[addx]
ja yabove
mov edx,[addx]
mov [step],edx
jmp xyinc
yabove:
mov [step],eax

xyinc:
fild dword[ddx]
fidiv dword[step]
fstp dword [xinc]

fild dword[ddy]
fidiv dword[step]
fstp dword [yinc]

fild dword[x0]
fstp dword[x]
fild dword[y0]
fstp dword[y]

mov ecx,0
nextgg:
cmp ecx,[step]
jge next5
pushad

fld dword[x]
fadd dword [xinc]
fst dword [x]
fistp dword [x0]

fld dword[y]
fadd dword [yinc]
fst dword [y]
fistp dword[y0]

call paint2
popad

inc ecx
jmp nextgg

paint2:
mov al,1111b
mov ecx,[x0]
mov edx,[y0]
mov ah,0ch
int 10h
ret
next5:
ret
times (0x400000 - 512) db 0

db 	0x63, 0x6F, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x78, 0x00, 0x00, 0x00, 0x02
db	0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
db	0x20, 0x72, 0x5D, 0x33, 0x76, 0x62, 0x6F, 0x78, 0x00, 0x05, 0x00, 0x00
db	0x57, 0x69, 0x32, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x78, 0x04, 0x11
db	0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xE6, 0xB9, 0x49, 0x44, 0x4E, 0x1C
db	0x50, 0xC9, 0xBD, 0x45, 0x83, 0xC5, 0xCE, 0xC1, 0xB7, 0x2A, 0xE0, 0xF2
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00